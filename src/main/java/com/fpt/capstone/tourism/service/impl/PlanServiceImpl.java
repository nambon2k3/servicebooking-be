package com.fpt.capstone.tourism.service.impl;

import com.fpt.capstone.tourism.constants.Constants;
import com.fpt.capstone.tourism.dto.common.GeneralResponse;
import com.fpt.capstone.tourism.dto.common.LocationWithoutGeoPositionDTO;
import com.fpt.capstone.tourism.dto.common.PlanDTO;
import com.fpt.capstone.tourism.dto.common.ServiceProviderSimpleDTO;
import com.fpt.capstone.tourism.dto.request.ActivityGenerateDTO;
import com.fpt.capstone.tourism.dto.request.GeneratePlanRequestDTO;
import com.fpt.capstone.tourism.dto.request.SavePlanRequestDTO;
import com.fpt.capstone.tourism.dto.request.review.ReviewRequestDTO;
import com.fpt.capstone.tourism.dto.response.PagingDTO;
import com.fpt.capstone.tourism.dto.response.PlanSaleResponseDTO;
import com.fpt.capstone.tourism.dto.response.review.ReviewResponseDTO;
import com.fpt.capstone.tourism.exception.common.BusinessException;
import com.fpt.capstone.tourism.helper.IHelper.PlanHelper;
import com.fpt.capstone.tourism.mapper.BookingMapper;
import com.fpt.capstone.tourism.mapper.LocationMapper;
import com.fpt.capstone.tourism.mapper.PlanMapper;
import com.fpt.capstone.tourism.mapper.ReviewMapper;
import com.fpt.capstone.tourism.model.*;
import com.fpt.capstone.tourism.model.enums.PlanStatus;
import com.fpt.capstone.tourism.repository.*;
import com.fpt.capstone.tourism.service.GeminiApiService;
import com.fpt.capstone.tourism.service.PlanService;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import java.text.DateFormat;
import java.text.Normalizer;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.regex.Pattern;

import static com.fpt.capstone.tourism.constants.Constants.Message.GET_PROVIDER_BY_LOCATION_FAIL;

@Service
@RequiredArgsConstructor
public class PlanServiceImpl implements PlanService {

    private final LocationRepository locationRepository;
    private final ServiceProviderRepository serviceProviderRepository;
    private final PlanRepository planRepository;
    private final ServiceRepository serviceRepository;
    private final ReviewRepository reviewRepository;

    private final LocationMapper locationMapper;
    private final PlanMapper planMapper;
    private final BookingMapper bookingMapper;

    private final PlanHelper planHelper;

    private final GeminiApiService geminiApiService;



    @Override
    public GeneralResponse<?> getLocations() {
        try {
            List<Location> locations = locationRepository.findRandomLocation(6);
            List<LocationWithoutGeoPositionDTO> dto = locations.stream().map(locationMapper::toLocationWithoutGeoPositionDTO).toList();
            return GeneralResponse.of(dto);
        } catch (Exception ex) {
            throw BusinessException.of("Kh√¥ng th·ªÉ l·∫•y ƒë·ªãa ƒëi·ªÉm cho k·∫ø ho·∫°ch", ex);
        }
    }

    @Override
    public GeneralResponse<?> getLocations(String name) {
        try {
            String normalizedName = removeAccents(name).toLowerCase();
            List<Location> locations = locationRepository.findAll(planHelper.searchLocationByName(normalizedName));
            return GeneralResponse.of(locations.stream().map(locationMapper::toPublicLocationDTO).toList());
        } catch (Exception ex) {
            throw BusinessException.of("Kh√¥ng th·ªÉ l·∫•y t·∫•t c·∫£ ƒë·ªãa ƒëi·ªÉm cho k·∫ø ho·∫°ch", ex);
        }
    }

    @Override
    public String buildServiceProviderContext(Long locationId) {
        try {
            List<ServiceProvider> hotels = serviceProviderRepository.findByLocationIdAndServiceCategoryIdAndDeletedFalse(locationId, 1L);
            List<ServiceProvider> restaurants = serviceProviderRepository.findByLocationIdAndServiceCategoryIdAndDeletedFalse(locationId, 2L);

            StringBuilder promptBuilder = new StringBuilder("H√£y ƒë·ªÅ xu·∫•t c√°c nh√† cung c·∫•p d·ªãch v·ª• (kh√°ch s·∫°n v√† nh√† h√†ng) ph√π h·ª£p cho kh√°ch h√†ng d·ª±a tr√™n d·ªØ li·ªáu sau:\n\n");

            // Append hotel data
            promptBuilder.append("üè® Kh√°ch s·∫°n:\n");
            for (ServiceProvider provider : hotels) {
                promptBuilder.append("- ").append(provider.getName())
                        .append(", ID: ").append(provider.getId())
                        .append(", ƒê·ªãa ch·ªâ: ").append(provider.getAddress())
                        .append(", Link ·∫¢nh: ").append(provider.getImageUrl())
                        .append("\n");
            }

            // Append restaurant data
            promptBuilder.append("\nüçΩÔ∏è Nh√† h√†ng:\n");
            for (ServiceProvider provider : restaurants) {
                promptBuilder.append("- ").append(provider.getName())
                        .append(", ID: ").append(provider.getId())
                        .append(", ƒê·ªãa ch·ªâ: ").append(provider.getAddress())
                        .append(", Link ·∫¢nh: ").append(provider.getImageUrl())
                        .append("\n");
            }
            Location location = locationRepository.findById(locationId).orElseThrow();
            promptBuilder.append("üè® Link Thumbnail Image: ").append(location.getImage()).append("\n");

            return promptBuilder.toString();
        } catch (Exception ex) {
            throw BusinessException.of("T·∫°o context kh√¥ng th√†nh c√¥ng", ex);
        }
    }

    @Override
    public String buildCustomerPreferContext(GeneratePlanRequestDTO dto) {
        try {
            StringBuilder contextBuilder = new StringBuilder();

            contextBuilder.append("Kh√°ch h√†ng ƒë√£ y√™u c·∫ßu m·ªôt k·∫ø ho·∫°ch du l·ªãch v·ªõi c√°c th√¥ng tin sau:\n\n");

            contextBuilder.append("- ƒê·ªãa ƒëi·ªÉm ID: ").append(dto.getLocationId()).append("\n");

            if (dto.getStartDate() != null && dto.getEndDate() != null) {
                DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                contextBuilder.append("- Th·ªùi gian: T·ª´ ")
                        .append(dateFormat.format(dto.getStartDate()))
                        .append(" ƒë·∫øn ")
                        .append(dateFormat.format(dto.getEndDate()))
                        .append("\n");
            } else {
                contextBuilder.append("- Th·ªùi gian: Kh√¥ng x√°c ƒë·ªãnh r√µ r√†ng - h√£y t·∫°o k·∫ø ho·∫°ch 3 ng√†y cho th·ªùi gian t√πy ch·ªçn trong t∆∞∆°ng lai g·∫ßn\n");
            }

            if (dto.getPlanType() != null && !dto.getPlanType().isEmpty()) {
                contextBuilder.append("- Lo·∫°i k·∫ø ho·∫°ch mong mu·ªën: ").append(dto.getPlanType()).append("\n");
            } else {
                contextBuilder.append("- Lo·∫°i k·∫ø ho·∫°ch mong mu·ªën: Kh√¥ng ƒë∆∞·ª£c cung c·∫•p\n");
            }

            if (dto.getPreferences() != null && !dto.getPreferences().isEmpty()) {
                contextBuilder.append("- S·ªü th√≠ch c√° nh√¢n: ").append(dto.getPreferences()).append("\n");
            } else {
                contextBuilder.append("- S·ªü th√≠ch c√° nh√¢n: Kh√¥ng ƒë∆∞·ª£c cung c·∫•p\n");
            }

            if (dto.isTravelingWithChildren()) {
                contextBuilder.append("- C√≥ s·ª± tham gia c·ªßa tr·∫ª em ").append(dto.getPreferences()).append("\n");
            } else {
                contextBuilder.append("- Kh√¥ng c√≥ s·ª± tham gia c·ªßa tr·∫ª em\n");
            }


            contextBuilder.append("\nH√£y s·ª≠ d·ª•ng c√°c th√¥ng tin tr√™n ƒë·ªÉ t·∫°o ra m·ªôt k·∫ø ho·∫°ch du l·ªãch ph√π h·ª£p nh·∫•t v·ªõi nhu c·∫ßu kh√°ch h√†ng.");

            return contextBuilder.toString();
        } catch (Exception ex) {
            throw BusinessException.of("T·∫°o context kh√¥ng th√†nh c√¥ng", ex);
        }
    }

    @Override
    public String buildActivityPreferences(ActivityGenerateDTO dto) {
        try {
            StringBuilder contextBuilder = new StringBuilder();

            contextBuilder.append("Kh√°ch h√†ng ƒë√£ y√™u c·∫ßu t√¨m c√°c ho·∫°t ƒë·ªông khi ƒëi du l·ªãch v·ªõi c√°c th√¥ng tin sau:\n\n");

            contextBuilder.append("- ƒê·ªãa ƒëi·ªÉm: ").append(dto.getLocationName()).append("\n");
            contextBuilder.append("- ID c·ªßa ho·∫°t ƒë·ªông b·∫Øt ƒë·∫ßu t·ª´: ").append(dto.getStartIndex()).append("\n");

            if (dto.getPreferences() != null && !dto.getPreferences().isEmpty()) {
                contextBuilder.append("- S·ªü th√≠ch c√° nh√¢n: ").append(dto.getPreferences()).append("\n");
            } else {
                contextBuilder.append("- S·ªü th√≠ch c√° nh√¢n: Kh√¥ng ƒë∆∞·ª£c cung c·∫•p\n");
            }
            contextBuilder.append("\nH√£y s·ª≠ d·ª•ng c√°c th√¥ng tin tr√™n ƒë·ªÉ t√¨m ra 6 ho·∫°t ƒë·ªông ph√π h·ª£p nh·∫•t v·ªõi nhu c·∫ßu kh√°ch h√†ng.");

            return contextBuilder.toString();
        } catch (Exception ex) {
            throw BusinessException.of("T·∫°o context kh√¥ng th√†nh c√¥ng", ex);
        }
    }

    @Override
    public GeneralResponse<?> generatePlan(GeneratePlanRequestDTO dto) {
        try {
            String prompt = Constants.AI.PROMPT_START
                    + buildCustomerPreferContext(dto)
                    + buildServiceProviderContext(dto.getLocationId())
                    + Constants.AI.PROMPT_END;

//            List<Map<String, String>> messages = new ArrayList<>();
//
//            Map<String, String> message1 = new HashMap<>();
//            message1.put("role", "user");
//            message1.put("content", prompt);
//            messages.add(message1);

            //String model = "deepseek-r1-distill-llama-70b";

            //String response = groqService.callGroqAPI(prompt, model);


            //response = response.replace("json", "").replace("```", "");


//            Plan plan = Plan.builder()
//                    .user(User.builder().id(dto.getUserId()).build())
//                    .content(response)
//                    .deleted(true)
//                    .planStatus(PlanStatus.CREATED)
//                    .build();

            //Plan savedPlan = planRepository.save(plan);


            return GeneralResponse.of(prompt);
        } catch (Exception ex) {
            throw BusinessException.of("T·∫°o prompt kh√¥ng th√†nh c√¥ng", ex);
        }
    }

    @Override
    public GeneralResponse<?> getPlanById(Long planId) {
        try {
            Plan plan = planRepository.findById(planId).orElseThrow();
            PlanDTO dto = planMapper.toPlanDto(plan);
            return GeneralResponse.of(dto);
        } catch (Exception ex) {
            throw BusinessException.of("L·∫•y d·ªØ li·ªáu th·∫•t b·∫°i", ex);
        }
    }

    @Override
    public GeneralResponse<?> deletePlanById(Long planId) {
        try {
            Plan plan = planRepository.findById(planId).orElseThrow();
            planRepository.deleteById(planId);
            PlanDTO dto = planMapper.toPlanDto(plan);
            return GeneralResponse.of(dto);
        } catch (Exception ex) {
            throw BusinessException.of("L·∫•y d·ªØ li·ªáu th·∫•t b·∫°i", ex);
        }
    }

    @Override
    public GeneralResponse<?> getPlansByUserId(Long userId) {
        try {
            List<Plan> plans = planRepository.getByUserId(userId);
            List<PlanDTO> dto = plans.stream().map(planMapper::toPlanDto).toList();
            return GeneralResponse.of(dto);
        } catch (Exception ex) {
            throw BusinessException.of("L·∫•y d·ªØ li·ªáu th·∫•t b·∫°i", ex);
        }
    }

    @Override
    public GeneralResponse<PagingDTO<List<PlanDTO>>> getPlans(int page, int size, String sortField, String sortDirection, Long userId) {
        try {
            Sort.Direction direction = sortDirection.equalsIgnoreCase("asc") ? Sort.Direction.ASC : Sort.Direction.DESC;
            Pageable pageable = PageRequest.of(page, size, Sort.by(direction, sortField));

            // Build search specification
            Specification<Plan> spec = planHelper.buildSearchSpecification(userId);

            Page<Plan> tourBookingPage = planRepository.findAll(spec, pageable);

            return planHelper.buildPagedResponse(tourBookingPage);
        } catch (Exception ex) {
            throw BusinessException.of("L·∫•y d·ªØ li·ªáu th·∫•t b·∫°i", ex);
        }
    }

    @Override
    public GeneralResponse<PagingDTO<List<PlanDTO>>> getPlans(int page, int size, String sortField, String sortDirection) {
        try {
            Sort.Direction direction = sortDirection.equalsIgnoreCase("asc") ? Sort.Direction.ASC : Sort.Direction.DESC;
            Pageable pageable = PageRequest.of(page, size, Sort.by(direction, sortField));

            // Build search specification
            Specification<Plan> spec = planHelper.buildSearchSpecification(true);

            Page<Plan> tourBookingPage = planRepository.findAll(spec, pageable);

            return planHelper.buildPagedResponse(tourBookingPage);
        } catch (Exception ex) {
            throw BusinessException.of("L·∫•y d·ªØ li·ªáu th·∫•t b·∫°i", ex);
        }
    }

    @Override
    public GeneralResponse<PagingDTO<List<PlanSaleResponseDTO>>> getPlans(int page, int size, String sortField, String sortDirection, PlanStatus planStatus, String keyword) {
        try {
            Sort.Direction direction = sortDirection.equalsIgnoreCase("asc") ? Sort.Direction.ASC : Sort.Direction.DESC;
            Pageable pageable = PageRequest.of(page, size, Sort.by(direction, sortField));

            // Build search specification
            Specification<Plan> spec = planHelper.buildSearchSpecification(planStatus, keyword);

            Page<Plan> tourBookingPage = planRepository.findAll(spec, pageable);

            return planHelper.buildPagedPlanSaleResponse(tourBookingPage);
        } catch (Exception ex) {
            throw BusinessException.of("L·∫•y d·ªØ li·ªáu th·∫•t b·∫°i", ex);
        }
    }

    @Override
    public GeneralResponse<?> updatePlan(String planJson, Long planId) {
        try {
            Plan plan = planRepository.findById(planId).orElseThrow();
            plan.setContent(planJson);

            planRepository.save(plan);
            PlanDTO dto = planMapper.toPlanDto(plan);
            return GeneralResponse.of(dto);
        } catch (Exception ex) {
            throw BusinessException.of("L·∫•y d·ªØ li·ªáu th·∫•t b·∫°i", ex);
        }
    }

    @Override
    public GeneralResponse<?> updateStatus(Long planId) {
        try {
            Plan plan = planRepository.findById(planId).orElseThrow();
            plan.setDeleted(false);
            planRepository.save(plan);
            PlanDTO dto = planMapper.toPlanDto(plan);
            return GeneralResponse.of(dto);
        } catch (Exception ex) {
            throw BusinessException.of("L·∫•y d·ªØ li·ªáu th·∫•t b·∫°i", ex);
        }
    }

    @Override
    public GeneralResponse<?> updateStatus(Long planId, PlanStatus planStatus) {
        try {
            Plan plan = planRepository.findById(planId).orElseThrow();
            plan.setPlanStatus(planStatus);
            planRepository.save(plan);
            PlanDTO dto = planMapper.toPlanDto(plan);
            return GeneralResponse.of(dto);
        } catch (Exception ex) {
            throw BusinessException.of("L·∫•y d·ªØ li·ªáu th·∫•t b·∫°i", ex);
        }
    }

    @Override
    public GeneralResponse<?> requestTourCreate(Long planId) {
        try {
            Plan plan = planRepository.findById(planId).orElseThrow();
            plan.setPlanStatus(PlanStatus.PENDING);
            Plan saved = planRepository.save(plan);
            PlanDTO dto = planMapper.toPlanDto(saved);
            return GeneralResponse.of(dto);
        } catch (Exception ex) {
            throw BusinessException.of("Thay ƒë·ªïi th√†nh c√¥ng", ex);
        }
    }

    @Override
    public GeneralResponse<?> getServiceProviders(Long locationId, String categoryName, List<Long> ids) {
        try {
            List<ServiceProvider> providers =serviceProviderRepository.getServiceByLocationIdAndServiceCategoryAndNotIncludeIDs(locationId, categoryName, ids);
            List<ServiceProviderSimpleDTO> dto = providers.stream().map(bookingMapper::toServiceProviderSimpleDTO).toList();
            return GeneralResponse.of(dto);
        } catch (Exception ex) {
            throw BusinessException.of(GET_PROVIDER_BY_LOCATION_FAIL , ex);
        }
    }

    @Override
    public GeneralResponse<?> getActivities(ActivityGenerateDTO dto) {
        try {
            String prompt = Constants.AI.PROMPT_START
                    + buildActivityPreferences(dto)
                    + Constants.AI.ACTIVITIES_PROMPT_END;
//            List<Map<String, String>> messages = new ArrayList<>();
//
//            Map<String, String> message1 = new HashMap<>();
//            message1.put("role", "user");
//            message1.put("content", prompt);
//            messages.add(message1);
//            String model = "deepseek-r1-distill-llama-70b";
//            String response = groqService.callGroqAPI(prompt, model);


//            response = response.replace("json", "").replace("```", "");
            return GeneralResponse.of(prompt);
        } catch (Exception ex) {
            throw BusinessException.of("L·∫•y d·ªØ li·ªáu th·∫•t b·∫°i" , ex);
        }
    }

    @Override
    public GeneralResponse<?> savePlan(SavePlanRequestDTO planDTO) {
        try {
            Plan plan = Plan.builder()
                    .user(User.builder().id(planDTO.getUserId()).build())
                    .content(planDTO.getPlan())
                    .deleted(true)
                    .planStatus(PlanStatus.CREATED)
                    .build();

            Plan savedPlan = planRepository.save(plan);
            return GeneralResponse.of(savedPlan.getId());
        } catch (Exception ex) {
            throw BusinessException.of(GET_PROVIDER_BY_LOCATION_FAIL , ex);
        }
    }

    private final ReviewMapper reviewMapper;

    @Override
    public GeneralResponse<?> getPlanReviews(Long planId) {
        try {
            List<Review> reviews = reviewRepository.findByPlanId(planId);
            List<ReviewResponseDTO> dtos = reviews.stream().map(reviewMapper::toDto).toList();
            return GeneralResponse.of(dtos);
        } catch (Exception ex) {
            throw BusinessException.of("Get Reviews failed" , ex);
        }
    }

    @Override
    @Transactional
    public GeneralResponse<?> createReview(Long planId, ReviewRequestDTO dto) {
        try {
            Review review = Review.builder()
                    .plan(Plan.builder().id(planId).build())
                    .user(User.builder().id(dto.getUserId()).build())
                    .content(dto.getContent())
                    .build();

            reviewRepository.save(review);
            return GeneralResponse.of(dto);
        } catch (Exception ex) {
            throw BusinessException.of("Get Reviews failed" , ex);
        }
    }

    public static String removeAccents(String text) {
        if (text == null) {
            return null;
        }
        String normalized = Normalizer.normalize(text, Normalizer.Form.NFD);//Chuy·ªÉn ch·ªØ c√≥ d·∫•u th√†nh k√Ω t·ª± g·ªëc + d·∫•u (v√≠ d·ª•: ƒê√† ‚Üí Da + d·∫•u huy·ªÅn).
        Pattern pattern = Pattern.compile("\\p{M}"); //  X√≥a t·∫•t c·∫£ c√°c d·∫•u kh·ªèi k√Ω t·ª±.
        return pattern.matcher(normalized).replaceAll("");
    }
}
